# -*- coding: utf-8 -*-
"""Statistical Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wy_raDwe0vSEN868sFb4zdRR_OkaHfpd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import t,f_oneway,mannwhitneyu
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df= pd.read_csv('realtor.csv')

df.describe()

df.head()

"""# Outlier detection

Outiler Detection for Real estate data which indicates unique poperty information is No a good approach. Each Row in the dataset is distict. SO JUST FOR ANALYSIS SAKE, I'LL PERFORM OUTLIER DETECTION. BUT WILL <u>**NOT BE DROPPING ANY ROWS**</u>
"""

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.0001)
    Q3 = data.quantile(0.99999)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return data[(data < lower_bound) | (data > upper_bound)].index

# outliers in the 'price' column
outlier_indices_price = detect_outliers_iqr(df['price'])
print("Outliers in 'price':")
print(df.loc[outlier_indices_price])
print('=========================================================================')

# outliers in 'house_size' column
outlier_indices_bed = detect_outliers_iqr(df['bed'])
print("\nOutliers in 'bedrooms':")
print(df.loc[outlier_indices_bed])
print('=========================================================================')

# outliers in 'house_size' column
outlier_indices_bath = detect_outliers_iqr(df['bath'])
print("\nOutliers in 'bathroom':")
print(df.loc[outlier_indices_bath])
print('=========================================================================')

# outliers in 'house_size' column
outlier_indices_acre_lot = detect_outliers_iqr(df['acre_lot'])
print("\nOutliers in 'acre_lot':")
print(df.loc[outlier_indices_acre_lot])
print('=========================================================================')

# outliers in 'house_size' column
outlier_indices_house_size = detect_outliers_iqr(df['house_size'])
print("\nOutliers in 'house_size':")
print(df.loc[outlier_indices_house_size])
print('=========================================================================')

"""# Correlation Analysis

Relationships and Correlations

- Price vs. Bedrooms: Calculating the correlation coefficient to see if there's a relationship between the number of bedrooms and the price.
- Price vs. Bathrooms: Calculating the correlation coefficient to see if there's a relationship between the number of bathrooms and the price.
- Price vs. Lot Size: Calculating the correlation coefficient to see if there's a relationship between the lot size and the price.
- Price vs. House Size: Calculating the correlation coefficient to see if there's a relationship between the house size and the price.
"""

def Pearson_correlation(X,Y):
    if len(X)==len(Y):
        Sum_xy = sum((X-X.mean())*(Y-Y.mean()))
        Sum_x_squared = sum((X-X.mean())**2)
        Sum_y_squared = sum((Y-Y.mean())**2)
        correlation = Sum_xy / np.sqrt(Sum_x_squared * Sum_y_squared)
    return correlation

df.columns

print('Pearson correlation between price and bedroom is {}'.format(Pearson_correlation(df['price'],df['bed'])))
print('\n ______________________________________________________________')
print('Pearson correlation between price and bathroom is {}'.format(Pearson_correlation(df['price'],df['bath'])))
print('\n ______________________________________________________________')
print('Pearson correlation between price and area of the property is {}'.format(Pearson_correlation(df['price'],df['acre_lot'])))
print('\n ______________________________________________________________')
print('Pearson correlation between price and house size is {}'.format(Pearson_correlation(df['price'],df['house_size'])))
print('\n ______________________________________________________________')

"""Interpretation:

Price vs. Bedrooms: The correlation coefficient is 0.1082, indicating a very weak positive correlation between price and the number of bedrooms. This suggests that while a higher number of bedrooms generally tends to result in a higher price, the relationship is not very strong.

Price vs. Bathrooms: The correlation coefficient is 0.1677, suggesting a slightly stronger positive correlation than between price and bedrooms. This indicates that, on average, properties with more bathrooms tend to have higher prices. However, the relationship is still relatively weak.

Price vs. Acre_Lot: The correlation coefficient is 0.0150, indicating a very weak positive correlation between price and the size of the lot (in acres). This suggests that there's minimal association between lot size and property price in your dataset.

Overall:

The results suggest that while there might be some relationship between price and the number of bedrooms and bathrooms, these relationships are relatively weak. Lot size appears to have minimal impact on property prices based on this dataset.

# Hypothesis testing for correlation

Purpose: To determine if the observed correlation coefficient is statistically significant. In other words, is the correlation you found in your sample likely to exist in the larger population, or could it be due to chance?
Method: Typically, a t-test is used to test the null hypothesis that the population correlation coefficient is zero (i.e., no correlation).
Interpretation: If the p-value from the t-test is below a chosen significance level (e.g., 0.05), you reject the null hypothesis and conclude that there is a statistically significant correlation between the variables.
"""

# Define variables for hypothesis testing
alpha = 0.05  # Significance level
n = len(df)  # Sample size

# Function to perform hypothesis testing for correlation
def test_correlation(x, y):
    corr_coef = df[x].corr(df[y])  # Calculate the correlation coefficient
    t_stat = corr_coef * np.sqrt((n - 2) / (1 - corr_coef**2))  # Calculate the t-statistic
    p_value = 2 * (1 - t.cdf(abs(t_stat), df=n-2))  # Calculate the p-value

    return corr_coef, t_stat, p_value

# Testing correlation between 'price' and 'bed'
corr_price_bed, t_stat_bed, p_value_bed = test_correlation('price', 'bed')

# Testing correlation between 'price' and 'bath'
corr_price_bath, t_stat_bath, p_value_bath = test_correlation('price', 'bath')

# Testing correlation between 'price' and 'acre_lot'
corr_price_acre_lot, t_stat_acre_lot, p_value_acre_lot = test_correlation('price', 'acre_lot')

# Printing the results
print(f"Correlation between 'price' and 'bed': {corr_price_bed:.4f}")
print(f"t-statistic: {t_stat_bed:.4f}")
print(f"p-value: {p_value_bed:.4f}")
print(f"Reject null hypothesis (no correlation): {'Yes' if p_value_bed < alpha else 'No'}\n")

print(f"Correlation between 'price' and 'bath': {corr_price_bath:.4f}")
print(f"t-statistic: {t_stat_bath:.4f}")
print(f"p-value: {p_value_bath:.4f}")
print(f"Reject null hypothesis (no correlation): {'Yes' if p_value_bath < alpha else 'No'}\n")

print(f"Correlation between 'price' and 'acre_lot': {corr_price_acre_lot:.4f}")
print(f"t-statistic: {t_stat_acre_lot:.4f}")
print(f"p-value: {p_value_acre_lot:.4f}")
print(f"Reject null hypothesis (no correlation): {'Yes' if p_value_acre_lot < alpha else 'No'}\n")

"""ANOVA (Analysis of Variance):

Purpose: To determine if there are statistically significant differences in the mean price between different categories of a categorical variable (e.g., if you have a variable for property_type with categories like "condo", "house", "townhouse").

"""

# For all the cities in the dataset, I will perform one-way ANOVA.
unique_cities = df['city'].unique()
city_prices = {}
for city in unique_cities:
    city_prices[city] = df[df['city'] == city]['price']

# Performing one-way ANOVA
try:
    f_statistic, p_value = f_oneway(*city_prices.values())
except ValueError:
    # Handle cases with fewer than two groups (e.g., if there's only one city in the data)
    print("Not enough groups for ANOVA.")
    f_statistic, p_value = None, None

# Print the results
if f_statistic is not None:
    print(f"F-statistic: {f_statistic}")
    print(f"p-value: {p_value}")

    # Interpret the results
    alpha = 0.05  # Significance level
    if p_value < alpha:
        print("Reject the null hypothesis. There is evidence that the mean price differs significantly across cities.")
    else:
        print("Fail to reject the null hypothesis. There is no evidence that the mean price differs significantly across cities.")

"""4. Non-parametric Tests:

If your data does not meet the assumptions of parametric tests (e.g., normality), you can use non-parametric alternatives:
Spearman's Rank Correlation: To measure the monotonic relationship between two variables.
Mann-Whitney U test: To compare the distributions of two groups of data.
Kruskal-Wallis test: To compare the distributions of multiple groups of data.
"""

# Perform Mann-Whitney U tests for all pairs of cities
"""for i in range(len(unique_cities)):
    for j in range(i+1, len(unique_cities)):
        city1 = unique_cities[i]
        city2 = unique_cities[j]

        city1_prices = df[df['city'] == city1]['price']
        city2_prices = df[df['city'] == city2]['price']

        stat, p_value = mannwhitneyu(city1_prices, city2_prices)

        print(f"Mann-Whitney U Test: {city1} vs. {city2}")
        print(f"U-statistic: {stat}")
        print(f"p-value: {p_value}")
        print()

        # Interpret the results (using a significance level of 0.05)
        alpha = 0.05
        if p_value < alpha:
            print(f"Reject the null hypothesis. There is evidence of a significant difference in price distributions between {city1} and {city2}.\n")
        else:
            print(f"Fail to reject the null hypothesis. There is no evidence of a significant difference in price distributions between {city1} and {city2}.\n")"""

"""# Regression Analysis

Purpose: To model the relationship between the variables and make predictions.
Method:
Simple Linear Regression: If you're interested in how one variable (e.g., number of bedrooms) predicts the price.
Multiple Linear Regression: If you want to consider the combined effect of multiple variables (bedrooms, bathrooms, lot size) on price.
Interpretation: Regression analysis provides insights into the strength and direction of the relationship, as well as allowing you to make predictions about the price based on the values of the other variables.
"""

X = df.drop('price')  # Features
y = df['price']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print results
print(f"Intercept: {model.intercept_}")
print(f"Coefficients: {model.coef_}")
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Number of Bedrooms')
plt.ylabel('Price')
plt.title('Linear Regression: Price vs. Bedrooms')
plt.legend()
plt.show()

plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Number of Bathrooms')
plt.ylabel('Price')
plt.title('Linear Regression: Price vs. Bathrooms')
plt.legend()
plt.show()

plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Number of Area of the property')
plt.ylabel('Price')
plt.title('Linear Regression: Price vs. Area of the property')
plt.legend()
plt.show()

plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Size of the House')
plt.ylabel('Price')
plt.title('Linear Regression: Price vs. House Size')
plt.legend()
plt.show()